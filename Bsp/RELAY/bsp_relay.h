/***********************************************************************************************************************************
 ** 【文件名称】  bsp_relay.h
 **
 ** 【文件功能】  继电器模块驱动头文件
 **
 ** 【模块说明】  单路/双路继电器控制模块
 **               特点：
 **               - 低电平触发：IN口接收低电平时继电器吸合，高电平时继电器断开
 **               - 工作电压：DC 5V（继电器线圈），控制信号3.3V/5V兼容
 **               - 负载能力：AC 250V/10A, DC 30V/10A
 **               - 响应时间：<10ms
 **               - 指示灯：继电器吸合时LED点亮
 **
 ** 【硬件连接】  VCC  -> 5V
 **               GND  -> GND
 **               IN1  -> PC1 (RELAY_IN1) - 继电器1控制信号
 **               IN2  -> PC2 (RELAY_IN2) - 继电器2控制信号（可选）
 **               COM  -> 负载公共端
 **               NO   -> 负载常开端
 **               NC   -> 负载常闭端（可选）
 **
 ** 【使用说明】  1. 确保在main.c中已调用MX_GPIO_Init()
 **               2. 调用Relay_Init()初始化（可选，GPIO已由MX初始化）
 **               3. 调用Relay_ON()/Relay_OFF()控制继电器
 **
 ** 【适用平台】  STM32F103 + HAL库
 **
 ** 【作者信息】  Created on: 2025-10-22
 **
************************************************************************************************************************************/

#ifndef __BSP_RELAY_H
#define __BSP_RELAY_H

#ifdef __cplusplus
extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
#include "stm32f1xx_hal.h"

/* 继电器通道定义 ----------------------------------------------------------*/
typedef enum
{
    RELAY_CH1 = 0,  // 继电器通道1（IN1 - PC1）
    RELAY_CH2 = 1   // 继电器通道2（IN2 - PC2）
} Relay_Channel_t;

/* 继电器状态定义 ----------------------------------------------------------*/
typedef enum
{
    RELAY_OFF = 0,  // 继电器断开（继电器未吸合，负载断电）
    RELAY_ON  = 1   // 继电器闭合（继电器吸合，负载通电）
} Relay_Status_t;

/* 函数声明 ----------------------------------------------------------------*/

/******************************************************************************
 * 函  数： Relay_Init
 * 功  能： 初始化继电器模块
 * 参  数： 无
 * 返回值： 无
 * 备  注： GPIO已由MX_GPIO_Init()初始化，本函数可选调用
 *          初始状态已设置为高电平（继电器断开），避免上电误触发
 ******************************************************************************/
void Relay_Init(void);

/******************************************************************************
 * 函  数： Relay_ON
 * 功  能： 继电器吸合（闭合触点，负载通电）
 * 参  数： Relay_Channel_t channel - 继电器通道（RELAY_CH1或RELAY_CH2）
 * 返回值： 无
 * 备  注： 低电平有效：输出GPIO_PIN_RESET使继电器吸合
 ******************************************************************************/
void Relay_ON(Relay_Channel_t channel);

/******************************************************************************
 * 函  数： Relay_OFF
 * 功  能： 继电器释放（断开触点，负载断电）
 * 参  数： Relay_Channel_t channel - 继电器通道（RELAY_CH1或RELAY_CH2）
 * 返回值： 无
 * 备  注： 高电平：输出GPIO_PIN_SET使继电器释放
 ******************************************************************************/
void Relay_OFF(Relay_Channel_t channel);

/******************************************************************************
 * 函  数： Relay_Toggle
 * 功  能： 继电器状态翻转
 * 参  数： Relay_Channel_t channel - 继电器通道（RELAY_CH1或RELAY_CH2）
 * 返回值： 无
 * 备  注： 切换继电器当前状态（开→关 或 关→开）
 ******************************************************************************/
void Relay_Toggle(Relay_Channel_t channel);

/******************************************************************************
 * 函  数： Relay_GetStatus
 * 功  能： 获取继电器当前状态
 * 参  数： Relay_Channel_t channel - 继电器通道（RELAY_CH1或RELAY_CH2）
 * 返回值： Relay_Status_t - RELAY_ON=吸合, RELAY_OFF=断开
 * 备  注： 读取GPIO电平判断继电器状态
 ******************************************************************************/
Relay_Status_t Relay_GetStatus(Relay_Channel_t channel);

#ifdef __cplusplus
}
#endif

#endif /* __BSP_RELAY_H */

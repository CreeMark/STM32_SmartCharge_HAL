#ifndef __BSP__CAN_H
#define __BSP__CAN_H
/***********************************************************************************************************************************
 ** 【代码编写】  魔女开发板团队
 ** 【淘    宝】  魔女开发板       https://demoboard.taobao.com
 ***********************************************************************************************************************************
 ** 【文件名称】  bsp_CAN.h
 **
 ** 【 功  能 】  CAN通信     
 **
 ** 【适用平台】  STM32F407 + keil5 + HAL库 
 **
 ** 【 CubeMX 】  使用CubeMX对CAN1进行配置, 具体如下 
 **               打开CAN1: 在CubeMX左侧的Connectivity通信组中，点击CAN1，打勾Activated，即可开启CAN1的详细配置;
 **               引脚使用：开启CAN1后，默认使用的引脚是PA11,PA12, 修改一下, CubeMX右侧芯片图中，重新选择：PB8 CAN1-RX、PB9 CAN1-TX
 **               波 特 率：在CAN1的详细配置框中，Parameter Settings > 按计算公式，修改4个值：分频值Prescaler、时段1的时间片个数值1~16、时段2的时间片个数值1~8、再同步宽度值SWJ1~4，如果不会计算，就上csdn.net抄作业
 **               接收中断: 在CAN1的详细配置框中，NVIC Settings > 打勾：CAN1 RX0 interrupts 
 **
 ** 【移植说明】  1- 复制本工程BSP文件夹下的：CAN文件夹，粘贴到目标工程文件夹中;
 **               2- 添加文件存放路径：Option > C/C++ > Include Paths，在弹出的文件夹路径窗口框中选择目标文件夹;
 **               3- 添加bsp_CAN.c到工程: 在Keil左侧工程管理器中双击目标文件夹, 在弹出的文件窗口框中选择;
 **               4- 添加文件引用：在main.c文件顶部添加: #include "bsp_CAN.h＂; 如果其它文件中要使用CAN的功能，则使用同样的include。
 **
 ** 【代码使用】  CAN1的初始化：不用管。使用CubeMX配置CAN1、选择引脚、打勾接收中断，生成代码后，已有完善的引脚初始化、CAN1初始化代码;
 **               筛选器初始化：调用已写好的自定义函数：CAN1_FilterInit(); 可以自行按需; 筛选器是CAN入门时的重中之重，无法三言两语解释清楚，上csdn.net刨十来篇文章就会有概念;
 **               开启CAN1:     这个需要手动调用HAL库函数：HAL_CAN_Start(&hcan1); 本示例把它放在了筛选器初始化函数尾部，这样就不用在main.c中再手动开启了;
 **               发送数据：    调用已写好的自定义函数 CAN1_SendData(数组，字节数); 帧格式可以在函数中重新定义、按需修改
 **               接收数据：    判断xCAN1.RXNum > 0; 在bsp_CAN.c中已重写了接收中断回调函数，接收到新一帧报文后，报文内容将存放到自定义结构体xCAN1中。当xCAN1.RXNum > 0时，就可以使用结构体中数据了，详见main.c中使用示范，大致如下：
 **                             xCAN1.RxHeader结构体：帧ID、字节数、格式、类型、字节数、时间戳等;
 **                             XCAN1.RxData数组：报文有效数据，最大8字节;
 **                             xCAN1.RxHeader.DLC也是有效字节数，但为了直观方便，在中断回调函数中，已把它复制到xCAN1.RxNum变量;
 **                             注意清0：每次处理完一帧数据，需要将xCAN1.RxNum变量清0，即：xCAN1.RxNum=0，以方便下一轮的判断，避免重复处理同一帧数据;
 **
 ** 【主要更新】  2024-01-30  建立文件
 **
************************************************************************************************************************************/
#include "can.h"                     // 特别地，本文件是CubeMX生成的CAN.h文件; 直接引用此文件，可以减少好些头文件的手动引用
// #include "stm32f4xx_hal.h"
// #include "stm32f4xx_hal_can.h"
// #include "main.h"
// extern CAN_HandleTypeDef hcan1;   // 特别地，本结构体，在CubeMX生成的can.c定义，在can.h中声明为全局变量; 如果已#include "can.h", 就无需再使用此行



/*****************************************************************************
 ** 移植配置修改区
****************************************************************************/
#define CAN_RX_ID 0x123              // 接收的标识符，在CAN1_FilterInit()中使用，无法用三言两语解释，自行上csdn.net刨CAN筛选器
#define CAN_TX_ID 0x666              // 发送的报文ID，在CAN1_SendData()中使用;



/*****************************************************************************
 ** 全局变量
****************************************************************************/
typedef struct
{
    // 发送                           // 当需要发送新一帧数据时，在自定义发送函数CAN1_SendData()中，修改下面几个变量，再调用HAL库函数 HAL_CAN_AddTxMessage( ), CAN1就会自动发送数据
    uint8_t  TxFlag;                  // 发送状态标志，用于记录 CAN1_SendData() 状态返回值
    CAN_TxHeaderTypeDef    TxHeader;  // HAL库的CAN发送结构体，其成员如下：
    // .StdId                         标准帧的ID, 11位, 值范围：0x00~0x7FF
    // .ExtId                         扩展帧的ID, 29位, 值范围：0x00~0x1FFFFFF
    // .DLC                           接收到的字节数, 单位：byte, 值范围：0~8 
    // .IDE                           帧格式; 0_标准帧、4_扩展帧
    // .RTR                           帧类型; 0_数据帧、2_遥控帧
    // .TransmitGlobalTime            使能时间戳，添加到Data[6]和Data[7] 
    
    // 接收                           // 当接收到新一帧数据时，下面变量，将在中断回调函数中被赋值; 在外部判断 xCAN1.RxNum > 0后，即可使用
    uint8_t  RxNum;                   // 接收到的字节数，也作为接收标志; xCAN1.RxHeader.DLC也是有效字节数，但为了直观方便，在中断回调函数中，已把其值复制到此xCAN1.RxNum变量; 
    uint8_t  RxData[9];               // 接收到的数据; CAN一帧数据最大有效负载8字节，数组中开辟9个字节，是为了适配以字符串输出调试信息，最后的1字节0='\0'，是字符串结束符;    
    CAN_RxHeaderTypeDef RxHeader;     // HAL库的CAN接收结构体，其成员如下：
    // .StdId                         标准帧的ID, 11位, 值范围：0x00~0x7FF
    // .ExtId                         扩展帧的ID, 29位, 值范围：0x00~0x1FFFFFF
    // .DLC                           接收到的字节数, 单位：byte, 值范围：0~8 
    // .FilterMatchIndex              筛选器编号, 值范围：0x00~0xFF
    // .IDE                           帧格式; 0_标准帧、4_扩展帧
    // .RTR                           帧类型; 0_数据帧、2_遥控帧
    // .Timestamp                     使用时间触发模式时，时间戳，值范围：0x00~0xFFFF       
} xCAN_InfoDef;
extern xCAN_InfoDef  xCAN1;           // 在bsp_CAN.c中定义，再在本h文件中，用extern声明为全局变量。用于方便管理CAN1的收发信息、变量数据等





/*****************************************************************************
 ** 声明全局函数
****************************************************************************/
void    CAN1_FilterInit(void);                         // 筛选器配置函数; 
uint8_t CAN1_SendData(uint8_t* msgData, uint8_t len);  // 数据发送函数;


#endif


// 文件结尾，需要保留至少1空行
